package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name="I hate this IDE so much", group="TeleOp")
public class NewMechanumCode extends LinearOpMode {
    public DcMotor MotorFL, MotorBL;
    public DcMotor MotorFR, MotorBR;
    public DcMotor rot, intake, pulley, pulley2;
    public Servo carriage;
    static boolean linearSlidesDown;
    static boolean linearSlidesMiddle;
    
    //Set up linear slides information
        static {
            linearSlidesDown = true;
            linearSlidesMiddle = false;
        }
        
    @Override
    public void runOpMode() {
        
        MotorFL = hardwareMap.get(DcMotor.class, "fL");
        MotorBL = hardwareMap.get(DcMotor.class, "bL");
        MotorFR = hardwareMap.get(DcMotor.class, "fR");
        MotorBR = hardwareMap.get(DcMotor.class, "bR");
        rot = hardwareMap.get(DcMotor.class, "ro");
        intake = hardwareMap.get(DcMotor.class, "in");
        pulley = hardwareMap.get(DcMotor.class, "pul");
        //pulley2 = hardwareMap.get(DcMotor.class, "pul2");
        carriage = hardwareMap.get(Servo.class, "car");

        pulley.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        //pulley2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        
        carriage.setPosition(0.95);
        
        MotorFL.setDirection(DcMotor.Direction.REVERSE);
        MotorFR.setDirection(DcMotor.Direction.REVERSE);
        MotorBL.setDirection(DcMotor.Direction.REVERSE);
        MotorBR.setDirection(DcMotor.Direction.REVERSE);
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            
            if (gamepad2.y && !linearSlidesMiddle) {
                if (linearSlidesDown) {
                    Drive(0);
                    carriage.setPosition(0.85);
                    runSlides(-15, -0.5);
                    linearSlidesMiddle = true;
                } else {
                    Drive(0);
                    carriage.setPosition(0.85);
                    runSlides(5, 0.5);
                    linearSlidesMiddle = true;
                }
            }
            
            //Linear Slides Control
            if (gamepad2.dpad_up && linearSlidesMiddle) {
                Drive(0);
                carriage.setPosition(0.85);
                runSlides(-5, -0.5);
                linearSlidesMiddle = false;
                linearSlidesDown = false;
            } else if (gamepad2.dpad_down && linearSlidesMiddle) {
                Drive(0);
                carriage.setPosition(0.95);
                runSlides(15, 0.5);
                linearSlidesMiddle = false;
                linearSlidesDown = true;
            } else if (gamepad2.dpad_up && linearSlidesDown) {
                Drive(0);
                carriage.setPosition(0.85);
                runSlides(-20, -0.5);
                linearSlidesDown = false;
            } else if (gamepad2.dpad_down && !linearSlidesDown) {
                Drive(0);
                carriage.setPosition(0.95);
                runSlides(20, 0.5);
                linearSlidesDown = true;
            } else {
                pulley.setPower(0);
            }
            
            //Intake Controls
            if (gamepad2.right_trigger > 0) {
                intake.setPower(1);
            } else if (gamepad2.left_trigger > 0) {
                intake.setPower(-1);
            } else {
                intake.setPower(0);
            }
            
            //Carriage Controls
            if (gamepad2.x && (!linearSlidesDown || linearSlidesMiddle)) {
                carriage.setPosition(1);
                sleep(500);
                carriage.setPosition(0.50);
                sleep(500);
            }
            
            //Carasel controls
            if (gamepad2.right_bumper) {
                rot.setPower(0.5);
            } else if (gamepad2.left_bumper) {
                rot.setPower(-0.5);
            } else {
                rot.setPower(0);
            }
            
            //file was erased so mecanum code needs to put back in
            /*double x = gamepad1.right_stick_x * -1.1;
            double y = gamepad1.right_stick_y;
            double rx = gamepad1.left_stick_x;
            
            double normalize = Math.abs(x) + Math.abs(y) + Math.abs(rx);
            
            double flpower = (x + y + rx)/normalize;
            double blpower = (-x + y + rx)/normalize;
            double frpower = (-x + y - rx)/normalize;
            double brpower = (x + y - rx)/normalize;
            
            MotorFL.setPower(flpower);
            MotorBL.setPower(blpower);
            MotorFR.setPower(frpower);
            MotorBR.setPower(brpower);*/
            
            /*double r = Math.hypot(gamepad1.left_stick_x, gamepad1.left_stick_y);
            double robotAngle = Math.atan2(gamepad1.left_stick_y, gamepad1.left_stick_x) - Math.PI / 4;
            double rightX = gamepad1.right_stick_x;
            final double v1 = r * Math.cos(robotAngle) + rightX;
            final double v2 = r * Math.sin(robotAngle) - rightX;
            final double v3 = r * Math.sin(robotAngle) + rightX;
            final double v4 = r * Math.cos(robotAngle) - rightX;
            
            MotorFL.setPower(v1);
            MotorFR.setPower(v2);
            MotorBL.setPower(v3);
            MotorBR.setPower(v4);*/
            
            if (gamepad1.left_stick_x != 0)
                Strafe(-gamepad1.left_stick_x);
            else if (gamepad1.left_stick_y != 0)
                Drive(gamepad1.left_stick_y);
            else
                Turn(-gamepad1.right_stick_x);
        }
    }

    void Turn (float speed){
        if(gamepad1.a)
        {
            MotorFL.setPower(1*speed);
            MotorBL.setPower(1*speed);
            MotorFR.setPower(1*speed);
            MotorBR.setPower(1*speed);

        }
        if(gamepad1.b)
        {
            MotorFL.setPower(0.3*speed);
            MotorBL.setPower(0.3*speed);
            MotorFR.setPower(0.3*speed);
            MotorBR.setPower(0.3*speed);

        }
        else {
            MotorFL.setPower(0.6 * speed);
            MotorBL.setPower(0.6 * speed);
            MotorFR.setPower(0.6 * speed);
            MotorBR.setPower(0.6 * speed);
        }
    }
    
    void Strafe (float speed){
        if(gamepad1.a)
        {
            MotorFL.setPower(0.9*speed);
            MotorBL.setPower(0.9*-speed);
            MotorFR.setPower(0.9*speed);
            MotorBR.setPower(0.9*-speed);
        }
        if(gamepad1.b)
        {
            MotorFL.setPower(0.3*speed);
            MotorBL.setPower(0.3*-speed);
            MotorFR.setPower(0.3*speed);
            MotorBR.setPower(0.3*-speed);
        }
        else {
            MotorFL.setPower(0.6 * speed);
            MotorBL.setPower(0.6 * -speed);
            MotorFR.setPower(0.6 * speed);
            MotorBR.setPower(0.6 * -speed);
        }
    }

    //Front is 223rpm, Back is 312rpm
    void Drive (float speed){
        if(gamepad1.a) {
            MotorFL.setPower(1*speed);
            MotorBL.setPower(1*speed);
            MotorFR.setPower(1*-speed);
            MotorBR.setPower(1*-speed);
        }
        if(gamepad1.b) {
            MotorFL.setPower(0.2*speed);
            MotorBL.setPower(0.2*speed);
            MotorFR.setPower(0.2*-speed);
            MotorBR.setPower(0.2*-speed);
        }
        else{
            MotorFL.setPower(0.6 * speed);
            MotorBL.setPower(0.6 * speed);
            MotorFR.setPower(0.6 * -speed);
            MotorBR.setPower(0.6 * -speed);
        }
    }
    
    private int getTicks(double inches) {
        double TICKS_PER_MOTOR_REV = 537.6;
        double DRIVE_GEAR_REDUCTION = 1.0;
        double WHEEL_DIAMETER_INCHES = 1.5;
        double COUNTS_PER_INCH = (TICKS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
           (WHEEL_DIAMETER_INCHES * 3.1415);
        
        return (int)(inches * COUNTS_PER_INCH);
    }
    
    private void runSlides(double pos, double power){
        double TICKS_PER_MOTOR_REV = 537.6;
       //countable events per revolution for output shaft, THIS NUMBER CHANGES DEPENDING ON THE TYPE OF MOTOR. VISIT SPECIFICATIONS ON THE WEBSITE THE TEAM GOT THE MOTOR FROM.
        double DRIVE_GEAR_REDUCTION = 1.0;
       //drive gear reduction
        double WHEEL_DIAMETER_INCHES = 1.5;
       //diameter of wheels
        double COUNTS_PER_INCH = (TICKS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
           (WHEEL_DIAMETER_INCHES * 3.1415);
           
        int newPos;
    
        if (opModeIsActive()) {
            
            pulley.setMode(DcMotorEx.RunMode.STOP_AND_RESET_ENCODER);
            //pulley2.setMode(DcMotorEx.RunMode.STOP_AND_RESET_ENCODER);
            
            newPos = (int)(pos * COUNTS_PER_INCH);
          
            pulley.setTargetPosition(newPos);
            //pulley2.setTargetPosition(newPos);

            pulley.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
            //pulley2.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);

            pulley.setPower(power);
            //pulley2.setPower(power);

            while (opModeIsActive() /* && (pulley2.isBusy() || pulley.isBusy())*/ && pulley.isBusy())
            {
               //Wait for it to finish rotating
            }
          
            pulley.setPower(0);
            //pulley2.setPower(0);

            pulley.setMode(DcMotorEx.RunMode.RUN_USING_ENCODER);
            //pulley2.setMode(DcMotorEx.RunMode.RUN_USING_ENCODER);

            sleep(250);
            /*
            1. Pause to prevent current movements to affect any future movements.
            */
       }
    }
}
